{"version":3,"sources":["lib/albion.js","context/index.js","App.js","reportWebVitals.js","index.js"],"names":["albion","calculatePricePerProduct","totalProduced","totalCost","Math","ceil","calculateProductionCost","ingredient1Price","ingredient2Price","ingredient1Quantity","ingredient2Quantity","calculateProfit","cost","sellPrice","quantitySold","totalSell","calculateRequiredMaterials","finalQuantity","options","Error","tier","Number","parseInt","getTierIngredientQuantity","producedAmmount","ingredient1Used","ingredient2Used","iterations","remainingAmmount","AppContext","React","createContext","AppContextProvider","children","useState","value","state","setState","Provider","useAppContext","context","useContext","undefined","Form","onSubmit","values","requiredMaterials","DESIRED_QUANTITY","TIER","INGREDIENT_1_PRICE","INGREDIENT_2_PRICE","profit","PRODUCT_UNITY_PRICE","costPerProduct","initialValues","handleChange","handleSubmit","className","htmlFor","id","name","onChange","selected","type","DisplayResults","appContext","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a70a350d.chunk.js","sourcesContent":["function getTierIngredientQuantity(tier) {\n  switch(Number.parseInt(tier)) {\n    case 3:\n      return [2,1]\n    case 4: \n      return [2,1]\n    case 5:\n      return [3,1]\n    case 6:\n      return [4,1]\n    case 7:\n      return [5,1]\n    case 8:\n      return [5,1]\n    default:\n      throw new Error(\"Invalid tier value\")\n  }\n}\n\nfunction calculateRequiredMaterials(finalQuantity, options) {\n    if(finalQuantity < 200) {\n      throw new Error(\"Invalid finalQuantity. Required minumum 200\")\n    }\n    const [ingredient1Quantity, ingredient2Quantity] = getTierIngredientQuantity(options.tier)\n\n    let producedAmmount = 0\n    let ingredient1Used = 0\n    let ingredient2Used = 0\n    let iterations = 0\n    let remainingAmmount = finalQuantity\n    \n    while(producedAmmount < finalQuantity) {\n      if(remainingAmmount >= 200) {\n        producedAmmount += 200\n        ingredient1Used += ingredient1Quantity * 200 - Math.ceil(ingredient1Quantity * 200 * 0.366)\n        ingredient2Used += ingredient2Quantity * 200 - Math.ceil(ingredient2Quantity * 200 * 0.366)\n        remainingAmmount -= 200\n      }\n      else {\n        producedAmmount += remainingAmmount\n        ingredient1Used += ingredient1Quantity * remainingAmmount - Math.ceil(ingredient1Quantity * remainingAmmount * 0.366)\n        ingredient2Used += ingredient2Quantity * remainingAmmount - Math.ceil(ingredient2Quantity * remainingAmmount * 0.366)\n        remainingAmmount -= remainingAmmount\n      }\n      iterations++\n    }\n  \n    return { producedAmmount, ingredient1Used, ingredient2Used, iterations }\n}\n  \nfunction calculateProductionCost({ ingredient1Price, ingredient2Price, ingredient1Quantity, ingredient2Quantity}) {\n    return ingredient1Price * ingredient1Quantity + ingredient2Price * ingredient2Quantity\n}\n\nfunction calculatePricePerProduct(totalProduced, totalCost) {\n    return Math.ceil(totalCost / totalProduced)\n}\n\nfunction calculateProfit(cost, sellPrice, quantitySold) {\n    const totalSell = quantitySold * sellPrice\n    const taxDiscount = Math.ceil(totalSell * 0.045)\n    return totalSell - taxDiscount - cost\n}\n\nconst albion = { calculatePricePerProduct, calculateProductionCost, calculateProfit, calculateRequiredMaterials }\nexport default albion","import React, { useState } from 'react'\n\nconst AppContext = React.createContext()\n\nfunction AppContextProvider({ children }) {\n    const [state, setState] = useState()\n\n    const value = { state, setState }\n    return (<AppContext.Provider value={value}>{children}</AppContext.Provider>)\n}\n\nfunction useAppContext() {\n    const context = React.useContext(AppContext)\n\n    if (context === undefined) {\n      throw new Error('useCount must be used within a AppContextProvider')\n    }\n  \n    return context\n}\n\nexport { AppContextProvider, useAppContext }","import './App.css';\nimport albion from './lib/albion'\nimport { AppContextProvider, useAppContext } from './context'\nimport { Formik } from 'formik'\n\nfunction Form() {\n  const { state, setState } = useAppContext()\n  const initialValues = {\n    \"DESIRED_QUANTITY\": 999,\n    \"TIER\": 5,\n    \"INGREDIENT_1_PRICE\": 0,\n    \"INGREDIENT_2_PRICE\": 0,\n    \"PRODUCT_UNITY_PRICE\": 0\n  }\n\n  const onSubmit = (values) => {\n    const requiredMaterials = albion.calculateRequiredMaterials(values.DESIRED_QUANTITY, { \"tier\": values.TIER })\n    const totalCost = albion.calculateProductionCost({\n      ingredient1Price: values.INGREDIENT_1_PRICE,\n      ingredient2Price: values.INGREDIENT_2_PRICE,\n      ingredient1Quantity: requiredMaterials.ingredient1Used,\n      ingredient2Quantity: requiredMaterials.ingredient2Used\n    })\n    const profit = albion.calculateProfit(totalCost, values.PRODUCT_UNITY_PRICE, values.DESIRED_QUANTITY)\n    const costPerProduct = albion.calculatePricePerProduct(values.DESIRED_QUANTITY, totalCost)\n\n    setState({\n      requiredMaterials,\n      totalCost,\n      profit,\n      costPerProduct,\n    })\n  }\n\n  return (\n    <Formik onSubmit={onSubmit} initialValues={initialValues}>\n      {({ values,\n        handleChange,\n        handleSubmit }) => (\n          <form onSubmit={handleSubmit} className=\"main-form\">\n            <div className=\"field-box\">\n              <label htmlFor=\"TIER\">Tier:</label>\n              <select id=\"TIER\" name=\"TIER\" onChange={handleChange} selected={values.DESIRED_QUANTITY}>\n                <option value=\"3\">Tier 3</option>\n                <option value=\"4\">Tier 4</option>\n                <option value=\"5\">Tier 5</option>\n                <option value=\"6\">Tier 6</option>\n                <option value=\"7\">Tier 7</option>\n                <option value=\"8\">Tier 8</option>\n              </select>\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"DESIRED_QUANTITY\">Quantidade desejada:</label>\n              <input id=\"DESIRED_QUANTITY\" name=\"DESIRED_QUANTITY\" type=\"text\" onChange={handleChange} value={values.DESIRED_QUANTITY} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"INGREDIENT_1_PRICE\">Preco do ingrediente 1 (Fiber, Hide):</label>\n              <input id=\"INGREDIENT_1_PRICE\" name=\"INGREDIENT_1_PRICE\" type=\"text\" onChange={handleChange} value={values.INGREDIENT_1_PRICE} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"INGREDIENT_2_PRICE\">Preco do ingrediente 2 (Cloth, Leather):</label>\n              <input id=\"INGREDIENT_2_PRICE\" name=\"INGREDIENT_2_PRICE\" type=\"text\" onChange={handleChange} value={values.INGREDIENT_2_PRICE} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"PRODUCT_UNITY_PRICE\">Preco de venda unitario do produto fabricado:</label>\n              <input id=\"PRODUCT_UNITY_PRICE\" name=\"PRODUCT_UNITY_PRICE\" type=\"text\" onChange={handleChange} value={values.PRODUCT_UNITY_PRICE} />\n            </div>\n            <button type=\"submit\" className=\"calculate-button\">Calcular</button>\n          </form>\n        )}\n    </Formik>\n  )\n}\n\nfunction DisplayResults() {\n  //   console.log({ requiredMaterials, totalCost, profit, costPerProduct })\n  const appContext = useAppContext()\n  if(appContext.state === undefined) return (<div></div>);\n  console.log(appContext.state)\n  const {\n    requiredMaterials,\n    totalCost,\n    profit,\n    costPerProduct\n  } = appContext.state\n\n  return (\n    <div className=\"DisplayResults\">\n      <h1>Resultado</h1>\n      <p>Total fabricado: <span>{requiredMaterials.producedAmmount}</span></p>\n      <p>Quantidade de Ingrediente 1: <span>{requiredMaterials.ingredient1Used}</span></p>\n      <p>Quantidade de Ingrediente 2: <span>{requiredMaterials.ingredient2Used}</span></p>\n      <p>Custo total dos ingredientes: <span>{totalCost}</span></p>\n      <p>Custo por produto fabricado: <span>{costPerProduct}</span></p>\n      <p className=\"profit\"><span>Lucro: {profit}</span></p>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <AppContextProvider>\n      <div className=\"App\">\n        <Form />\n        <DisplayResults />\n      </div>\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}