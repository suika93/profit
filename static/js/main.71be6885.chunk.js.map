{"version":3,"sources":["lib/albion.js","context/index.js","App.js","reportWebVitals.js","index.js"],"names":["albion","calculatePricePerProduct","totalProduced","totalCost","Math","ceil","calculateIngredientCost","ingredient1Price","ingredient2Price","ingredient1Quantity","ingredient2Quantity","calculateProfit","cost","sellPrice","quantitySold","totalSell","calculateRequiredMaterials","producedAmmount","options","tier","Number","parseInt","Error","getIngredientQuantitiesForTier","ingredient1Used","ingredient2Used","calculateUsageFee","feeTax","productBaseValue","getProductBaseValueFromTier","AppContext","React","createContext","AppContextProvider","children","useState","value","state","setState","Provider","useAppContext","context","useContext","undefined","Form","onSubmit","values","requiredMaterials","DESIRED_QUANTITY","TIER","INGREDIENT_1_PRICE","INGREDIENT_2_PRICE","usageFee","USAGE_FEE","profit","PRODUCT_UNITY_PRICE","costPerProduct","initialValues","handleChange","handleSubmit","className","htmlFor","id","name","onChange","selected","type","DisplayResults","appContext","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71be6885.chunk.js","sourcesContent":["function getIngredientQuantitiesForTier(tier) {\n  switch(Number.parseInt(tier)) {\n    case 3:\n      return [2,1]\n    case 4: \n      return [2,1]\n    case 5:\n      return [3,1]\n    case 6:\n      return [4,1]\n    case 7:\n      return [5,1]\n    case 8:\n      return [5,1]\n    default:\n      throw new Error(\"Invalid tier value\")\n  }\n}\n\nfunction getProductBaseValueFromTier(tier) {\n  switch(Number.parseInt(tier)) {\n    case 3:\n      return 6\n    case 4: \n      return 14\n    case 5:\n      return 30\n    case 6:\n      return 62\n    case 7:\n      return 126\n    case 8:\n      return 254\n    default:\n      throw new Error(\"Invalid tier value\")\n  }\n}\n\n\nfunction calculateUsageFee(feeTax, productBaseValue) {\n  // FeePercentage * ProductValue * 5 / 100\n  return Number.parseInt(feeTax) * Number.parseInt(productBaseValue) * 5 / 100\n}\n\nfunction calculateRequiredMaterials(producedAmmount, options) {\n    const [ingredient1Quantity, ingredient2Quantity] = getIngredientQuantitiesForTier(options.tier)\n\n    const ingredient1Used = ingredient1Quantity * producedAmmount - Math.ceil(ingredient1Quantity * producedAmmount * 0.366)\n    const ingredient2Used = ingredient2Quantity * producedAmmount - Math.ceil(ingredient2Quantity * producedAmmount * 0.366)\n  \n    return { producedAmmount, ingredient1Used, ingredient2Used }\n}\n  \nfunction calculateIngredientCost({ ingredient1Price, ingredient2Price, ingredient1Quantity, ingredient2Quantity }) {\n    return ingredient1Price * ingredient1Quantity + ingredient2Price * ingredient2Quantity\n}\n\nfunction calculatePricePerProduct(totalProduced, totalCost) {\n    return Math.ceil(totalCost / totalProduced)\n}\n\nfunction calculateProfit(cost, sellPrice, quantitySold) {\n    const totalSell = quantitySold * sellPrice\n    const taxDiscount = Math.ceil(totalSell * 0.045)\n    return totalSell - taxDiscount - cost\n}\n\nconst albion = { calculatePricePerProduct, calculateIngredientCost, calculateProfit, calculateRequiredMaterials, calculateUsageFee, getProductBaseValueFromTier }\nexport default albion","import React, { useState } from 'react'\n\nconst AppContext = React.createContext()\n\nfunction AppContextProvider({ children }) {\n    const [state, setState] = useState()\n\n    const value = { state, setState }\n    return (<AppContext.Provider value={value}>{children}</AppContext.Provider>)\n}\n\nfunction useAppContext() {\n    const context = React.useContext(AppContext)\n\n    if (context === undefined) {\n      throw new Error('useCount must be used within a AppContextProvider')\n    }\n  \n    return context\n}\n\nexport { AppContextProvider, useAppContext }","import './App.css';\nimport albion from './lib/albion'\nimport { AppContextProvider, useAppContext } from './context'\nimport { Formik } from 'formik'\n\nfunction Form() {\n  const { state, setState } = useAppContext()\n  const initialValues = {\n    \"DESIRED_QUANTITY\": 999,\n    \"TIER\": 5,\n    \"INGREDIENT_1_PRICE\": 0,\n    \"INGREDIENT_2_PRICE\": 0,\n    \"PRODUCT_UNITY_PRICE\": 0,\n    \"USAGE_FEE\": 9\n  }\n\n  const onSubmit = (values) => {\n    const requiredMaterials = albion.calculateRequiredMaterials(values.DESIRED_QUANTITY, { \"tier\": values.TIER })\n    const totalCost = albion.calculateIngredientCost({\n      ingredient1Price: values.INGREDIENT_1_PRICE,\n      ingredient2Price: values.INGREDIENT_2_PRICE,\n      ingredient1Quantity: requiredMaterials.ingredient1Used,\n      ingredient2Quantity: requiredMaterials.ingredient2Used\n    })\n    const usageFee = Math.ceil(albion.calculateUsageFee(values.USAGE_FEE, albion.getProductBaseValueFromTier(values.TIER)) * values.DESIRED_QUANTITY) \n    const profit = albion.calculateProfit(totalCost, values.PRODUCT_UNITY_PRICE, values.DESIRED_QUANTITY) - usageFee\n    const costPerProduct = albion.calculatePricePerProduct(values.DESIRED_QUANTITY, totalCost)\n\n    setState({\n      requiredMaterials,\n      totalCost,\n      profit,\n      costPerProduct,\n      usageFee\n    })\n  }\n\n  return (\n    <Formik onSubmit={onSubmit} initialValues={initialValues}>\n      {({ values,\n        handleChange,\n        handleSubmit }) => (\n          <form onSubmit={handleSubmit} className=\"main-form\">\n            <div className=\"field-box\">\n              <label htmlFor=\"TIER\">Tier:</label>\n              <select id=\"TIER\" name=\"TIER\" onChange={handleChange} selected={values.DESIRED_QUANTITY}>\n                <option value=\"3\">Tier 3</option>\n                <option value=\"4\">Tier 4</option>\n                <option value=\"5\">Tier 5</option>\n                <option value=\"6\">Tier 6</option>\n                <option value=\"7\">Tier 7</option>\n                <option value=\"8\">Tier 8</option>\n              </select>\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"DESIRED_QUANTITY\">Quantidade desejada:</label>\n              <input id=\"DESIRED_QUANTITY\" name=\"DESIRED_QUANTITY\" type=\"text\" onChange={handleChange} value={values.DESIRED_QUANTITY} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"INGREDIENT_1_PRICE\">Preco do ingrediente 1 (Fiber, Hide):</label>\n              <input id=\"INGREDIENT_1_PRICE\" name=\"INGREDIENT_1_PRICE\" type=\"text\" onChange={handleChange} value={values.INGREDIENT_1_PRICE} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"INGREDIENT_2_PRICE\">Preco do ingrediente 2 (Cloth, Leather):</label>\n              <input id=\"INGREDIENT_2_PRICE\" name=\"INGREDIENT_2_PRICE\" type=\"text\" onChange={handleChange} value={values.INGREDIENT_2_PRICE} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"USAGE_FEE\">Taxa de uso da construcao (0-100%):</label>\n              <input id=\"USAGE_FEE\" name=\"USAGE_FEE\" type=\"text\" onChange={handleChange} value={values.USAGE_FEE} />\n            </div>\n\n            <div className=\"field-box\">\n              <label htmlFor=\"PRODUCT_UNITY_PRICE\">Preco de venda unitario do produto fabricado:</label>\n              <input id=\"PRODUCT_UNITY_PRICE\" name=\"PRODUCT_UNITY_PRICE\" type=\"text\" onChange={handleChange} value={values.PRODUCT_UNITY_PRICE} />\n            </div>\n            <button type=\"submit\" className=\"calculate-button\">Calcular</button>\n          </form>\n        )}\n    </Formik>\n  )\n}\n\nfunction DisplayResults() {\n  //   console.log({ requiredMaterials, totalCost, profit, costPerProduct })\n  const appContext = useAppContext()\n  if(appContext.state === undefined) return (<div></div>);\n\n  const {\n    requiredMaterials,\n    totalCost,\n    profit,\n    costPerProduct,\n    usageFee\n  } = appContext.state\n\n  return (\n    <div className=\"DisplayResults\">\n      <h1>Resultado</h1>\n      <p>Total fabricado: <span>{requiredMaterials.producedAmmount}</span></p>\n      <p>Quantidade de Ingrediente 1: <span>{requiredMaterials.ingredient1Used}</span></p>\n      <p>Quantidade de Ingrediente 2: <span>{requiredMaterials.ingredient2Used}</span></p>\n      <p>Custo total dos ingredientes: <span>{totalCost}</span></p>\n      <p>Custo de uso da construcao: <span>{usageFee}</span></p>\n      <p>Custo por produto fabricado: <span>{costPerProduct}</span></p>\n      <p className=\"profit\"><span>Lucro: {profit}</span></p>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <AppContextProvider>\n      <div className=\"App\">\n        <Form />\n        <DisplayResults />\n      </div>\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}